@inject IJSRuntime JSRuntime

<div>
    <div class="alert alert-info">
        @Title
    </div>
    @if (ChildSomeContent is not null)
    {
        <div class="alert alert-success">
            @ChildSomeContent            
        </div>
    }
    @if (ChildContent is not null)
    {
        <div class="alert alert-success">
            @ChildContent
        </div>
    }
    <button class="btn btn-danger" @onclick="OnButtonClick">Click Me</button>
    <p>There is a message - @MessageFromGrandChild</p>

    <_GrandChildComponent />
</div>

@code {
    [Parameter]
    public string Title { get; set; } = default!;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public RenderFragment ChildSomeContent { get; set; }
    [Parameter]
    public EventCallback OnButtonClick { get; set; }  
    // Cascading is by type and not by name of property - Try using prop Name on CascadingValue
    [CascadingParameter(Name = "Message")]
    public string MessageFromGrandChild { get; set; }

    public async Task ToastrSuccess()
    {
        //await JSRuntime.InvokeVoidAsync("showToastr", "success", "Success Notification");
        await JSRuntime.ToastrSuccess("Success Notification");
    }
}
